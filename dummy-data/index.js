export const posts = [
  {
    __typename: "Post",
    databaseId: 8046,
    title: "Lorem ipsum dolor sit amet",
    date: "2021-03-16T08:00:00",
    uri: "/2021/03/16/getting-started-with-wpgraphql-and-gridsome/",
    excerpt:
      '<p>This is a guest post by @nicolaisimonsen Gridsome is a Vue.js framework for building static generated sites/apps. It&#8217;s performant, powerful, yet simple and really faaaaast. Gridsome can pull in data from all sorts of data-sources like CMSs, APIs, Markdown etc. It has a lot of features. Go check &#8217;em out. Since GraphQL is so efficient &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/03/16/getting-started-with-wpgraphql-and-gridsome/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;Getting started with WPGraphQL and Gridsome&#8221;</span></a></p>\n',
    featuredImage: null,
  },
  {
    __typename: "Post",
    databaseId: 8058,
    title: "Utrum igitur tibi litteram videor an totas",
    date: "2021-03-09T14:31:03",
    uri: "/2021/03/09/gutenberg-and-decoupled-applications/",
    excerpt:
      '<p>In this article I want to dive into the current state of Gutenberg and WPGraphQL. This is a technical article about using Gutenberg blocks in the context of decoupled / headless / API-driven WordPress, and makes the assumption that you already know what Gutenberg is and have some general understanding of how it works. TL;DR &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/03/09/gutenberg-and-decoupled-applications/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;Gutenberg and Decoupled Applications&#8221;</span></a></p>\n',
    featuredImage: null,
  },
  {
    __typename: "Post",
    databaseId: 8089,
    title: "Quid, quod res alia tota est?",
    date: "2021-03-03T12:35:22",
    uri: "/2021/03/03/my-weekend-release-snafu/",
    excerpt:
      '<p>This past weekend I released v1.2.0 of WPGraphQL. And 1.2.1, and 1.2.2, and 1.2.3, and 1.2.4, and 1.2.5. I made some changes to the Github repo that caused deploys to not behave as intended, and to call it a &#8220;snafu&#8221; might be an understatement. Plugin distribution For the first 4 years of WPGraphQL, the plugin &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/03/03/my-weekend-release-snafu/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;My weekend release snafu&#8221;</span></a></p>\n',
    featuredImage: null,
  },
  {
    __typename: "Post",
    databaseId: 8097,
    title: "Ita fit beatae vitae domina fortuna",
    date: "2021-03-01T08:00:00",
    uri: "/2021/03/01/wpgraphql-featured-on-the-matt-report/",
    excerpt:
      "<p>On February 28, The Matt Report podcast published the episode where Matt and I discussed WPGraphQL and WordPress. In the interview we discussed topics such as using WordPress with Gatsby, Gutenberg, Component based architecture, and more. Check it out over at MattReport.com, or catch the video interview on YouTube:</p>\n",
    featuredImage: null,
  },
  {
    __typename: "Post",
    databaseId: 8036,
    title: "Familiares nostros, credo, Sironem dicis",
    date: "2021-02-17T10:16:39",
    uri: "/2021/02/17/wpgraphql-featured-on-torque-news-drop/",
    excerpt:
      "<p>I had the pleasure of joining Doc Pop Roberts on the Torque Magazine News Drop. We spent 18 minutes discussing headless WordPress and WPGraphQL. Give it a watch!!</p>\n",
    featuredImage: null,
  },
  {
    __typename: "Post",
    databaseId: 8011,
    title: "Quae quo sunt excelsiores, eo dant clariora",
    date: "2021-02-16T21:47:59",
    uri: "/2021/02/16/setting-up-a-new-developer-environment-to-contribute-to-wpgraphql/",
    excerpt:
      '<p>I just announced that I am now employed by WP Engine to work on WPGraphQL. With new employment comes a new Macbook, which I need to setup as a dev machine to continue working on WPGraphQL. It&#8217;s always a tedious process to get a new computer setup to be an effective developer, so I thought &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/02/16/setting-up-a-new-developer-environment-to-contribute-to-wpgraphql/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;Setting up a new developer environment to contribute to WPGraphQL&#8221;</span></a></p>\n',
    featuredImage: null,
  },
];

export const category = {
  __typename: "Category",
  name: "Uncategorized",
  posts: {
    __typename: "CategoryToPostConnection",
    nodes: [
      {
        __typename: "Post",
        databaseId: 8046,
        title: "A quibus propter discendi cupiditatem",
        excerpt:
          '<p>This is a guest post by @nicolaisimonsen Gridsome is a Vue.js framework for building static generated sites/apps. It&#8217;s performant, powerful, yet simple and really faaaaast. Gridsome can pull in data from all sorts of data-sources like CMSs, APIs, Markdown etc. It has a lot of features. Go check &#8217;em out. Since GraphQL is so efficient &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/03/16/getting-started-with-wpgraphql-and-gridsome/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;Getting started with WPGraphQL and Gridsome&#8221;</span></a></p>\n',
        uri: "/2021/03/16/getting-started-with-wpgraphql-and-gridsome/",
        featuredImage: null,
      },
      {
        __typename: "Post",
        databaseId: 8058,
        title: "Si enim ad populum me vocas",
        excerpt:
          '<p>In this article I want to dive into the current state of Gutenberg and WPGraphQL. This is a technical article about using Gutenberg blocks in the context of decoupled / headless / API-driven WordPress, and makes the assumption that you already know what Gutenberg is and have some general understanding of how it works. TL;DR &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/03/09/gutenberg-and-decoupled-applications/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;Gutenberg and Decoupled Applications&#8221;</span></a></p>\n',
        uri: "/2021/03/09/gutenberg-and-decoupled-applications/",
        featuredImage: null,
      },
      {
        __typename: "Post",
        databaseId: 8089,
        title: "Partim cursu et peragratione laetantur",
        excerpt:
          '<p>This past weekend I released v1.2.0 of WPGraphQL. And 1.2.1, and 1.2.2, and 1.2.3, and 1.2.4, and 1.2.5. I made some changes to the Github repo that caused deploys to not behave as intended, and to call it a &#8220;snafu&#8221; might be an understatement. Plugin distribution For the first 4 years of WPGraphQL, the plugin &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/03/03/my-weekend-release-snafu/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;My weekend release snafu&#8221;</span></a></p>\n',
        uri: "/2021/03/03/my-weekend-release-snafu/",
        featuredImage: null,
      },
      {
        __typename: "Post",
        databaseId: 8097,
        title: "Nam et a te perfici istam disputationem",
        excerpt:
          "<p>On February 28, The Matt Report podcast published the episode where Matt and I discussed WPGraphQL and WordPress. In the interview we discussed topics such as using WordPress with Gatsby, Gutenberg, Component based architecture, and more. Check it out over at MattReport.com, or catch the video interview on YouTube:</p>\n",
        uri: "/2021/03/01/wpgraphql-featured-on-the-matt-report/",
        featuredImage: null,
      },
      {
        __typename: "Post",
        databaseId: 8036,
        title: "Quae hic rei publicae vulnera",
        excerpt:
          "<p>I had the pleasure of joining Doc Pop Roberts on the Torque Magazine News Drop. We spent 18 minutes discussing headless WordPress and WPGraphQL. Give it a watch!!</p>\n",
        uri: "/2021/02/17/wpgraphql-featured-on-torque-news-drop/",
        featuredImage: null,
      },
      {
        __typename: "Post",
        databaseId: 8011,
        title: "Qui non moveatur et offensione turpitudinis",
        excerpt:
          '<p>I just announced that I am now employed by WP Engine to work on WPGraphQL. With new employment comes a new Macbook, which I need to setup as a dev machine to continue working on WPGraphQL. It&#8217;s always a tedious process to get a new computer setup to be an effective developer, so I thought &hellip; </p>\n<p class="link-more"><a href="https://www.wpgraphql.com/2021/02/16/setting-up-a-new-developer-environment-to-contribute-to-wpgraphql/" class="more-link">Continue reading<span class="screen-reader-text"> &#8220;Setting up a new developer environment to contribute to WPGraphQL&#8221;</span></a></p>\n',
        uri: "/2021/02/16/setting-up-a-new-developer-environment-to-contribute-to-wpgraphql/",
        featuredImage: null,
      },
    ],
  },
};

export const post = {
  __typename: "Post",
  date: "2021-03-16T08:00:00",
  title: "Lorem ipsum dolor sit amet",
  content:
    '\n<blockquote class="wp-block-quote"><p>This is a guest post by <a rel="noreferrer noopener" href="https://twitter.com/nicolaisimonsen" target="_blank">@nicolaisimonsen</a></p></blockquote>\n\n\n\n<p>Gridsome is a Vue.js framework for building static generated sites/apps. It&#8217;s performant, powerful, yet simple and really <em>faaaaast</em>. Gridsome can pull in data from all sorts of data-sources like CMSs, APIs, Markdown etc. It has a lot of features. <a href="https://gridsome.org">Go check &#8217;em out</a>.</p>\n\n\n\n<p>Since GraphQL is so efficient and great to work with it makes sense to fetch our WordPress data in that manner. That&#8217;s obviously where WPGraphQL comes into the picture and I think it&#8217;s a match made in heaven.  ðŸ™Œ</p>\n\n\n\n<p>If you&#8217;re up for it, below is a quick-start tutorial that will guide you through building your first WPGraphQL-Gridsome app. <br></p>\n\n\n\n<p>I know I&#8217;m stoked about it! </p>\n\n\n\n<h2>What we will be building</h2>\n\n\n\n<p>Weâ€™ll go ahead and build a small personal site in <strong>Gridsome</strong>. Basically just a blog. The blog posts will be fetched from WordPress via <strong>WPGraphQL</strong>. </p>\n\n\n\n<figure class="wp-block-image size-large"><img src="https://camo.githubusercontent.com/783385f7727861daac0663e886d77ca32fbbc299bc2b435fc8ca28ad8a44b17d/68747470733a2f2f77706772617068716c2d67726964736f6d652d737461727465722d707265766965772e6e65746c6966792e6170702f77616c6b7468726f7567682e676966"/></figure>\n\n\n\n<p>This project is very minimal, lightweight and this project alone might not blow your socks off, but itâ€™s foundational and a great start to get into headless WordPress with Gridsome.<em> </em> </p>\n\n\n\n<h2>Setup a WordPress install</h2>\n\n\n\n<p>First off is to install WordPress.</p>\n\n\n\n<p>I highly recommend <a href="https://localwp.com/">Local</a> for setting up WordPress locally. It handles everything from server setup and configuration to installing WordPress.</p>\n\n\n\n<p>You can also use MAMP/WAMP/LAMP or however else you like to do it. It&#8217;s all good.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="287" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/welcome-1024x287.png" alt="" class="wp-image-8183" srcset="https://content.wpgraphql.com/wp-content/uploads/2021/03/welcome-1024x287.png 1024w, https://content.wpgraphql.com/wp-content/uploads/2021/03/welcome-300x84.png 300w, https://content.wpgraphql.com/wp-content/uploads/2021/03/welcome-768x216.png 768w, https://content.wpgraphql.com/wp-content/uploads/2021/03/welcome-1536x431.png 1536w, https://content.wpgraphql.com/wp-content/uploads/2021/03/welcome-2048x575.png 2048w, https://content.wpgraphql.com/wp-content/uploads/2021/03/welcome-1568x440.png 1568w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>\n\n\n\n<p>With WordPress spun up and ready to go, we want to install and activate our one and only plugin. WPGraphQL.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="1000" height="294" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/install-plugin.jpg" alt="" class="wp-image-8185" srcset="https://content.wpgraphql.com/wp-content/uploads/2021/03/install-plugin.jpg 1000w, https://content.wpgraphql.com/wp-content/uploads/2021/03/install-plugin-300x88.jpg 300w, https://content.wpgraphql.com/wp-content/uploads/2021/03/install-plugin-768x226.jpg 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></figure>\n\n\n\n<p>Now go to <strong><em>WPGraphQL &gt; Settings</em></strong> and tick &#8220;<strong><em>Enable Public Introspection</em></strong>&#8220;.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="1000" height="118" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/introspection.jpg" alt="" class="wp-image-8187" srcset="https://content.wpgraphql.com/wp-content/uploads/2021/03/introspection.jpg 1000w, https://content.wpgraphql.com/wp-content/uploads/2021/03/introspection-300x35.jpg 300w, https://content.wpgraphql.com/wp-content/uploads/2021/03/introspection-768x91.jpg 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></figure>\n\n\n\n<p>That&#8217;s it. We are now cooking with GraphQL ðŸ”¥ðŸ”¥ðŸ”¥</p>\n\n\n\n<p>Included with WPGraphQL is the IDE tool which is awesome for building/testing out queries directly in WordPress.<br>It might be a good idea to play around in here for a few minutes before we move along.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="1000" height="530" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/graphql-ide-walkthrough.gif" alt="" class="wp-image-8353"/></figure>\n\n\n\n<p>Aaaaaaand we&#8217;re back. Last thing we need to do is just to add a new post. Add a title, add some content and press publish.</p>\n\n\n\n<p>Great. You&#8217;re golden. Onwards to some coding!</p>\n\n\n\n<h2>Gridsome? Let&#8217;s go!</h2>\n\n\n\n<p>I&#8217;m including a <a rel="noreferrer noopener" href="https://github.com/nicolaisimonsen/wpgraphql-gridsome-starter-stripped" data-type="URL" data-id="https://github.com/nicolaisimonsen/wpgraphql-gridsome-starter-stripped" target="_blank">WPGraphQL-Gridsome</a> starter (well, actually two).</p>\n\n\n\n<p>I highly <strong>recommend</strong> cloning the <a href="#stripped">s</a><a rel="noreferrer noopener" href="https://github.com/nicolaisimonsen/wpgraphql-gridsome-starter-stripped" data-type="URL" data-id="https://github.com/nicolaisimonsen/wpgraphql-gridsome-starter-stripped" target="_blank">tripped version</a> &#8211; this will only include styles and html, so we can hit the ground running.</p>\n\n\n\n<p>However, you can also just start from scratch.</p>\n\n\n\n<p>Either way I got you.<br><br>If you just want the <a rel="noreferrer noopener" href="https://github.com/nicolaisimonsen/wpgraphql-gridsome-starter-full" data-type="URL" data-id="https://github.com/nicolaisimonsen/wpgraphql-gridsome-starter-full" target="_blank">full code</a>, that&#8217;s completely fine too.</p>\n\n\n\n<hr class="wp-block-separator"/>\n\n\n\n<p>Let&#8217;s go ahead an open our terminal/console.</p>\n\n\n\n<p>The very first thing is to install the Gridsome CLI</p>\n\n\n\n<pre class="wp-block-code lang-shell"><code>npm install --global @gridsome/cli</code></pre>\n\n\n\n<p>Navigate to your desired project folder and type in</p>\n\n\n\n<pre class="wp-block-code lang-shell"><code>gridsome create my-personal-site https://github.com/nicolaisimonsen/wpgraphql-gridsome-starter-stripped.git</code></pre>\n\n\n\n<p>or if you&#8217;re starting from scratch</p>\n\n\n\n<pre class="wp-block-code lang-shell"><code>gridsome create my-personal-site</code></pre>\n\n\n\n<p>Now move into the project directory &#8211; then start the local develoment</p>\n\n\n\n<pre class="wp-block-code lang-shell"><code>cd my-personal-site</code></pre>\n\n\n\n<pre class="wp-block-code lang-shell"><code>gridsome develop</code></pre>\n\n\n\n<p>In our code editor we should have the following:</p>\n\n\n\n<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="191" height="268" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/folder-content.png" alt="" class="wp-image-8191"/></figure></div>\n\n\n\n<p>We&#8217;re now exactly where we want to be. From here we need to pull in WPGraphQL to Gridsome as our data-source. For that we&#8217;ll be using this <a href="https://gridsome.org/plugins/gridsome-source-graphql" data-type="URL" data-id="https://gridsome.org/plugins/gridsome-source-graphql">gridsome source plugin</a>. Go ahead and install it.</p>\n\n\n\n<pre class="wp-block-code lang-shell"><code>npm install gridsome-source-graphql</code></pre>\n\n\n\n<p>The source plugin needs to be configured.<br>Open up gridsome.config.js and provide the following object for the plugins array. </p>\n\n\n\n<pre class="wp-block-code lang-javascript"><code>//gridsome.config.js\nmodule.exports = {\n//\n  plugins: [\n    {\n      use: \'gridsome-source-graphql\',\n      options: {\n        url: \'http://{your-site}/graphql\',\n        typeName: \'WPGraphQL\',\n        fieldName: \'wpgraphql\',\n      },\n    },\n  ],\n//\n}</code></pre>\n\n\n\n<p>Remember the options.url is the site url + graphql endpoint.<br><em>(Can be found in WordPress under WPGraphQL &gt; Settings &gt; GraphQL endpoint)</em><br><br>For every change to gridsome.config.js or gridsome.server.js, we need to restart the app. You can type <code>ctrl + c</code> to exit the <code>gridsome develop</code> process and run <code>gridsome develop</code> again to restart.</p>\n\n\n\n<p>Now you can test the new GraphQL data-source in Gridsome Playground/IDE &#8211; located at <code>http://localhost:8080/___graphql</code><br>Write out the following query and hit the execute button (â–¶ï¸Ž): </p>\n\n\n\n<pre class="wp-block-code lang-graphql"><code>query {\n  posts {\n    edges {\n      node {\n        id\n        uri\n      }\n    }\n  }\n}</code></pre>\n\n\n\n<p>There you have it. On the right side you should see your posts data.</p>\n\n\n\n<p>That data could prove to be mighty useful, huh?</p>\n\n\n\n<p>We&#8217;ll start setting up a Gridsome template for our posts.</p>\n\n\n\n<p>Within the &#8220;src&#8221; folder there&#8217;s a folder called &#8220;templates&#8221;.</p>\n\n\n\n<p>A template is used to create a single page/route in a given collection (<em>think</em> posts). Go to/create a file within &#8220;templates&#8221; folder called <strong>Post.vue</strong>.</p>\n\n\n\n<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="927" height="1024" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/code-post-template-1-927x1024.png" alt="" class="wp-image-8195" srcset="https://content.wpgraphql.com/wp-content/uploads/2021/03/code-post-template-1-927x1024.png 927w, https://content.wpgraphql.com/wp-content/uploads/2021/03/code-post-template-1-272x300.png 272w, https://content.wpgraphql.com/wp-content/uploads/2021/03/code-post-template-1-768x848.png 768w, https://content.wpgraphql.com/wp-content/uploads/2021/03/code-post-template-1.png 1112w" sizes="(max-width: 927px) 100vw, 927px" /><figcaption><strong>/src/templates/Post.vue</strong></figcaption></figure></div>\n\n\n\n<p>In order to query the data from the GraphQL data layer into our templates we can use the following blocks;<br><br><strong><code>&lt;page-query&gt;</code></strong> for pages/templates, requires id.<br><strong><code>&lt;static-query&gt;</code></strong> for components.<br><br>In the <strong>Post.vue</strong> template we are fetching a specific post (by id &#8211; more on that later), so we&#8217;ll write the following <code>&lt;page-query&gt;</code> in between the <code>&lt;template&gt;</code> and <code>&lt;script&gt;</code> blocks:</p>\n\n\n\n<div class="wp-block-embed gist" gist="https://gist.github.com/jasonbahl/8288edd4bdc5c669620f12a0c4b10561"></div>\n\n\n\n<p>Also &#8211; change <em><strong><code>console.log(this)</code></strong></em> to <strong><em><code>console.log(this.$page)</code></em></strong>.</p>\n\n\n\n<p>Important &#8211; we&#8217;ve only laid the groundwork for our template. It won&#8217;t actually fetch the data yet, since the route/page and id (dynamically) haven&#8217;t been created. The step needed is the <a rel="noreferrer noopener" href="https://gridsome.org/docs/pages-api/#pages-api" target="_blank">Pages API</a> and that&#8217;s where we are heading right now. </p>\n\n\n\n<p>Open up gridsome.server.js and provide the following. <br>(<em>Remember to restart afterwards</em>)</p>\n\n\n\n<pre class="wp-block-code lang-javascript"><code>// gridsome.server.js\nmodule.exports = function(api) {\n  api.loadSource(({ addCollection }) => {\n    // Use the Data Store API here: https://gridsome.org/docs/data-store-api/\n  });\n\n  api.createPages(async ({ graphql, createPage }) => {\n    const { data } = await graphql(`\n      \n        query {\n          posts {\n            edges {\n              node {\n                id\n                uri\n              }\n            }\n          }\n        }\n      \n    `);\n\n    data.posts.edges.forEach(({ node, id }) => {\n      createPage({\n        path: `${node.uri}`,\n        component: "./src/templates/Post.vue",\n        context: {\n          id: node.id,\n        },\n      });\n    });\n  });\n};</code></pre>\n\n\n\n<p>Remember the Gridsome Playground query?</p>\n\n\n\n<p>Basically the api.createPages hook goes into the data layer fetched from WPGraphQL and queries the posts (the exact query we ran in Playground) and then loops through the collection to create single page/routes.  We&#8217;ll provide a path/url for the route, a component which is the Post.vue template and lastly and context.id of the post/node id.<br><br>Magic happened when running &#8220;gridsome develop&#8221; and now we have routes (got routes?). These can be found in src/.temp/routes.js.</p>\n\n\n\n<p>Try accessing the very first Post route in the browser &#8211; <em><code>localhost:8080/{path}</code> &#8211;</em> and open up the inspection tool to get the console.</p>\n\n\n\n<p>Because of the <code>console.log(this.$page)</code> in the mounted() hook of our Post.vue &#8211; the post data from WordPress is now being written out in the console.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="914" height="484" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/page-query-1.png" alt="" class="wp-image-8197" srcset="https://content.wpgraphql.com/wp-content/uploads/2021/03/page-query-1.png 914w, https://content.wpgraphql.com/wp-content/uploads/2021/03/page-query-1-300x159.png 300w, https://content.wpgraphql.com/wp-content/uploads/2021/03/page-query-1-768x407.png 768w" sizes="(max-width: 914px) 100vw, 914px" /></figure>\n\n\n\n<p>With this specific data now being available we just need to bind it to the actual template, so we can finally get the HTML and post displayed. Replace the current &lt;article&gt; block with the following:</p>\n\n\n\n<div class="wp-block-embed gist" gist="https://gist.github.com/jasonbahl/81f7533a46a81b75972b5264c28ee571"></div>\n\n\n\n<p>Refresh the page. </p>\n\n\n\n<p>Well, ain&#8217;t that a sight for sore eyes. Our blog posts are finally up.</p>\n\n\n\n<p>Even though we&#8217;re not quite done yet this is awesome. Good job!<br><br>Now. We have posts and that&#8217;s really great for a blog, but our visitors might need a way to navigate to these.<br>Let&#8217;s set up a page called &#8220;blog&#8221; to list all of our blog posts.<br><br>There&#8217;s a folder with &#8220;src&#8221; called &#8220;pages&#8221; and this is a great way to setup single pages/routes non-programmatically. <br>Basically we just put a file with the <strong><em>.vue extension</em></strong> in there and we now have a singe page for that particular route and only that route. Even if we did set up a <strong><em>Page.vue</em></strong> template within &#8220;templates&#8221;, the Blog.vue file in the &#8220;pages&#8221; folder would still supercede. Sweet!</p>\n\n\n\n<p>But why would you do that? Well, simple and fast is not always a sin. We also really don&#8217;t need to maintain a page in WordPress that only list out blog posts and the content is not really changing. However, just know that we could create a Page.vue template if we choose to, and obviously it would include our blog page.</p>\n\n\n\n<p>In our new Blog.vue file in &#8220;pages&#8221; folder insert this &lt;static-query&gt; <br>in between the &lt;template&gt; and &lt;script&gt; blocks:</p>\n\n\n\n<div class="wp-block-embed gist" gist="https://gist.github.com/jasonbahl/2b818c5c0848ff023336bf26715d6fec"></div>\n\n\n\n<p>So we want to fetch all the posts to display on our blog page and that&#8217;s why we&#8217;re writing a static query. There&#8217;s no page template/Wordpress data for this page and so even if we wrote out a &lt;page-query&gt; (like in Post.vue) it would return <strong><em>null</em></strong>. nothing. nada. nichego.<br><strong><em>Change the <code>console.log(this)</code> to <code>console.log(this.$static)</code></em></strong> and open up our blog page in the browser. Also open the inspection tool and look at the console.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="904" height="742" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/static-query.png" alt="" class="wp-image-8199" srcset="https://content.wpgraphql.com/wp-content/uploads/2021/03/static-query.png 904w, https://content.wpgraphql.com/wp-content/uploads/2021/03/static-query-300x246.png 300w, https://content.wpgraphql.com/wp-content/uploads/2021/03/static-query-768x630.png 768w" sizes="(max-width: 904px) 100vw, 904px" /></figure>\n\n\n\n<p>Awesome. Our static-query ($static) has returned an object with an array of 2 posts. We now have the data, so let&#8217;s display it on the page.</p>\n\n\n\n<p>Replace the &lt;script&gt; block with the following:</p>\n\n\n\n<div class="wp-block-embed gist" gist="https://gist.github.com/jasonbahl/1e6afbcb2dbb7d4abb9600d0ba1027c2"></div>\n\n\n\n<p>This adds a <code>getDate</code> function that we will be using in our Template.  </p>\n\n\n\n<p>Now, replace the <code>&lt;template&gt;</code> block with the following:</p>\n\n\n\n<div class="wp-block-embed gist" gist="https://gist.github.com/jasonbahl/025ebf14edb85d712914e97cdf9b4d9d"></div>\n\n\n\n<p>Voila! Go check out the page in the browser.</p>\n\n\n\n<p>We are now displaying our posts or rather an excerpt of these with a button to take us to the actual post. That&#8217;s wild! Again, good job.<br></p>\n\n\n\n<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" width="480" height="400" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/celebration.gif" alt="" class="wp-image-8223"/></figure></div>\n\n\n\n<p>That pretty much concludes the tutorial. You&#8217;ve created a personal site with a blog in Gridsome using WordPress &amp; WPGraphQL.</p>\n\n\n\n<h2>Build. Deployment. Live.</h2>\n\n\n\n<p>The last thing to this build is to actually use the command &#8216;build&#8217;. </p>\n\n\n\n<p>Go to the terminal/console and execute:</p>\n\n\n\n<pre class="wp-block-code lang-shell"><code>gridsome build</code></pre>\n\n\n\n<p>Gridsome is now generating static files and upon completion you&#8217;ll find the newly created &#8220;dist&#8221; folder and all of the files and assets.</p>\n\n\n\n<figure class="wp-block-image size-large"><img loading="lazy" width="256" height="438" src="https://content.wpgraphql.com/wp-content/uploads/2021/03/dist.png" alt="" class="wp-image-8201" srcset="https://content.wpgraphql.com/wp-content/uploads/2021/03/dist.png 256w, https://content.wpgraphql.com/wp-content/uploads/2021/03/dist-175x300.png 175w" sizes="(max-width: 256px) 100vw, 256px" /></figure>\n\n\n\n<p>That&#8217;s the site and all of the data from WordPress in a folder that you can actually just drop onto a FTP server and you have a live site.</p>\n\n\n\n<p>However a more dynamic and modern way of doing static deployment is to use a static web host and build from a git repository.</p>\n\n\n\n<p>There&#8217;s lots of hosts out there. I absolutely love and recommend <a rel="noreferrer noopener" href="https://gridsome.org/docs/deploy-to-netlify/" target="_blank">Netlify</a>, but others include <a rel="noreferrer noopener" href="https://gridsome.org/docs/deploy-to-vercel/" target="_blank">Vercel</a>, <a rel="noreferrer noopener" href="https://gridsome.org/docs/deploy-to-amplify/" target="_blank">Amplify</a>, <a rel="noreferrer noopener" href="https://gridsome.org/docs/deploy-to-surge-sh/" target="_blank">Surge.sh</a>. </p>\n\n\n\n<p>The links above should take you to some guides of how exactly to deploy using their services. </p>\n\n\n\n<p>It would also be pretty cool if we could trigger a build whenever a post is created/updated/deleted in WordPress. Otherwise we could have to manually build from time to time retrieve the latest data from WordPress. Luckily plugins like <a rel="noreferrer noopener" href="https://wordpress.org/plugins/wp-jamstack-deployments/" data-type="URL" data-id="https://wordpress.org/plugins/wp-jamstack-deployments/" target="_blank">JAMstack Deployments</a> help us in that regard. It takes in a build hook url from a static web host and hits that each time WordPress does its operations. I would suggest you to try it out.</p>\n\n\n\n<p>I won&#8217;t go into deployment in further details, but just wanted to let you in on some of the options for deploying a static site. I&#8217;m quite sure can take it from here. </p>\n\n\n\n<h2>Where to go from here?</h2>\n\n\n\n<p>Obviously deployment &#8211; taking this site live should be one of the next steps, but we might also want to enhance the project. <br>I&#8217;ve listed some possible improvements, which could also just serve as great practice â†“</p>\n\n\n\n<p><strong><em>Further improvements might be;&nbsp;</em></strong></p>\n\n\n\n<ul><li>Displaying the latest articles on the home page</li><li>Add <a rel="noreferrer noopener" href="https://www.wpgraphql.com/docs/posts-and-pages/#filtering-a-list-of-posts" data-type="URL" data-id="https://www.wpgraphql.com/docs/posts-and-pages/#filtering-a-list-of-posts" target="_blank">filtering</a> and/or <a href="https://gridsome.org/docs/pagination/" data-type="URL" data-id="https://gridsome.org/docs/pagination/" target="_blank" rel="noreferrer noopener">pagination</a> for the blog</li><li>Adding a Page.vue template for a Contact and/or About page</li><li><a rel="noreferrer noopener" href="https://gridsome.org/docs/assets-css/#use-sass--css-pre-processors" data-type="URL" data-id="https://gridsome.org/docs/assets-css/#use-sass--css-pre-processors" target="_blank">Use SASS &amp; CSS pre-processors in Gridsome</a></li><li>Pull in the top menu dynamically from WPGraphQL</li><li><a rel="noreferrer noopener" href="https://www.wpgraphql.com/extenstion-plugins/wpgraphql-for-advanced-custom-fields/" data-type="URL" data-id="https://www.wpgraphql.com/extenstion-plugins/wpgraphql-for-advanced-custom-fields/" target="_blank">Try adding Advanced Custom Fields</a> *</li><li>Something entirely different that you feel like creating, e.g.<ul><li>Other sites (Personal/Product/Corporate/Agency)</li></ul><ul><li>E-commerce</li><li>PWAs</li></ul></li></ul>\n\n\n\n<p>* A word about extensions &#8211; WPGraphQL can be extended to integrate with other WordPress plugins. <br>Advanced Custom Fields is a great plugin used by so many to enrich the content and structure of a WordPress site. There&#8217;s an <a rel="noreferrer noopener" href="https://www.wpgraphql.com/extensions" data-type="URL" data-id="https://www.wpgraphql.com/extensions" target="_blank">WPGraphQL extension</a> for it (and other great plugins too) and these are maintained by some awesome community contributors.  Gridsome also has a badass community and a lot of plugins to get you started.<br><br>It&#8217;s almost too good to be true ðŸ˜¯</p>\n\n\n\n<h2>Wrap it up already</h2>\n\n\n\n<p>So that&#8217;s basically it. Thanks for reading and coding along. </p>\n\n\n\n<p>I definitely encourage you to go further read the documentation on both Gridsome and WPGraphQL. It&#8217;s very well written and has examples that will help you no matter what you might build. <br><br>Lastly, if you need to get in touch I&#8217;ll try to help you out the best I can. <br>Very lastly, if this was of any use to you, or maybe you just hated it &#8211; go ahead and let me know.</p>\n\n\n\n<p><a href="https://twitter.com/nicolaisimonsen" target="_blank" rel="noreferrer noopener">@nicolaisimonsen</a></p>\n',
  author: {
    __typename: "NodeWithAuthorToUserConnectionEdge",
    node: { __typename: "User", name: "Nicolai Simonsen" },
  },
  categories: {
    __typename: "PostToCategoryConnection",
    nodes: [
      { __typename: "Category", slug: "uncategorized", name: "Uncategorized" },
    ],
  },
};
